{"name":"Sgfxapi","tagline":"Implementation of clb's gfxapi, heavily modified.","body":"\r\nsgfxapi (http://realazthat.github.io/sgfxapi/)\r\n---\r\n\r\n\r\nSimple wrapper around opengl 4, based off of [clb](http://clb.demon.fi)'s [gfxapi docs](http://clb.demon.fi/gfxapi/).\r\n\r\nThe wrapper can help users understand the requirements of OpenGL4 API and to learn the OpenGL4 API.\r\n\r\nBranch   | docs |\r\n---      | --- \r\nmaster   | [docs](http://realazthat.github.io/sgfxapi/master/sphinx-docs/html/)\r\ndevelop  | [docs](http://realazthat.github.io/sgfxapi/develop/sphinx-docs/html/)\r\n\r\n\r\n\r\n\r\nLicense\r\n----\r\nLibraries have their own license.\r\n\r\nSome specific files might have their own license included in them; in this case those files fall under\r\nthat license. Some directories might have their own license; in that case those directories will have\r\na README, LICENSE, COPYING or similar file related to licensing.\r\n\r\nAs for the rest of the project, code written by me in this project is released under the\r\n[MIT License](https://opensource.org/licenses/MIT).\r\n\r\n\r\nDependencies\r\n----\r\n\r\nBuild system:\r\n\r\n* CMake >= 3.1 (if using CMake)\r\n* doxygen for documentation generation\r\n* sphinx (python) for documentation generation\r\n* breathe (python) for documentation generation\r\n\r\nLibraries:\r\n\r\n* [MathGeoLib](http://clb.demon.fi/MathGeoLib/nightly/), tested with master from 2015/08/26.\r\n* [glfw3](http://www.glfw.org/docs/latest/), tested with glfw-3.1.1.bin.WIN64 binary distribution.\r\n* [glew](http://glew.sourceforge.net/),\r\n    tested with 1.12.0-3, from the `msys2/mingw-w64 64-bit` environment installed via pacman.\r\n* `glut`, or `freeglut`, tested with `freeglut`, from the `msys2/mingw-w64 64-bit` environment, installed via pacman.\r\n* `glu`\r\n* [corner-cases/cubelib](https://github.com/realazthat/corner-cases)\r\n    * Useful library to reason about corners, edges, sides, of an imaginary cube\r\n\r\n\r\n\r\nHow to install some of these via msys2/mingw-w64:\r\n\r\n    #search\r\n    pacman -Ss glut\r\n    \r\n    #install\r\n    pacman -S mingw64/mingw-w64-x86_64-freeglut\r\n\r\n\r\nProject Parts/Build Targets\r\n----\r\n\r\n* sgfxapi\r\n* sgfxapi-drawutils\r\n* sgfxdemo\r\n\r\nsgfxapi\r\n------\r\n\r\nThe actual library.\r\n\r\n\r\nsgfxapi-drawutils\r\n------\r\n\r\nA utility library for drawing some simple things, and some useful default shaders.\r\n\r\n\r\nsgfxdemo\r\n------\r\n\r\nA demo application that renders stuff.\r\n\r\n\r\n\r\nBuilding\r\n----\r\n\r\nRequires C++11.\r\n\r\nTested with `msys2/mingw-w64 64-bit shell` on Windows 7.\r\n\r\n\r\n\r\n#####With codelite:\r\n\r\nYou can open the 3 projects, `sgfxapi.project`, `sgfxapi-drawutils.project`, and `sgfxdemo.project`.\r\n\r\nYou will have to go to each project's settings and set the correct include directories, and the correct linker directories.\r\n\r\nBuild them in that order.\r\n\r\nCopy any dlls dependencies to the build directories to run. You will need to copy the ones for the lib dependencies\r\nand also the ones that are part of the compiler runtime, if any.\r\n\r\n    #these are for gcc, it would depend on the compiler and environment if you need to copy these over.\r\n    cp /path/to/compiler/libstdc++-6.dll .\r\n    cp /path/to/compiler/libgcc_s_seh-1.dll .\r\n    cp /path/to/compiler/libwinpthread-1.dll .\r\n    #and these are the library depndencies\r\n    cp /path/to/glew/glew32.dll .\r\n    cp /path/to/glfw/gflw3.dll .\r\n    #and so on\r\n\r\nIf you still get errors about missing dlls, or see a windows error of `0xc000007b` (whichmeans that one of the\r\ndlls are not in the build directory, and instead it found installed on the system; but the one found is an\r\narchitecture mismatch (32-bit/64-bit) ) then you have to find what other runtime dlls your binary requires.\r\nIf using an msys-based compiler, you can use msys2's `ldd` (find via `pacman -Ss ldd` and install via something\r\nlike `pacman -S mingw64/mingw-w64-x86_64-ntldd-git`) from within msys2 to locate these dlls, or use\r\n[Dependency Walker](http://www.dependencywalker.com/) to locate them within the windows environment.\r\n\r\n\r\n\r\n\r\n#####With cmake under msys2/mingw-w64:\r\n\r\nAssuming you have a msys2 or linux-like environment, with a gcc-style compiler (clang would\r\nlikely also work this way):\r\n\r\n    cd sgfxapi\r\n    \r\n    \r\n    \r\n    #install dependencies, there are some bash scripts provided in the ./scripts/ directory\r\n    # that will download and build many of the dependencies and put them in the ./libs directory\r\n    # the scripts are meant for the continuous integration system, but you can run them yourself\r\n    # or read them for assistance.\r\n    \r\n    #optionally install or download and build googletest (only matters if you are going to run the unittests)\r\n    #note, choose the appropriate generator\r\n    #see the bash scripts for for more details\r\n    CMAKE_GENERATOR=\"MSYS Makefiles\" CMAKE_BUILD_TYPE=\"Debug\" bash ./scripts/download-and-build-googletest.sh\r\n    #... etc. install dependencies\r\n    \r\n    \r\n    #make a build directory\r\n    mkdir -p build && cd build\r\n    \r\n    \r\n    #note, choose the appropriate generator\r\n    cmake -G\"MSYS Makefiles\" .. -DCMAKE_BUILD_TYPE=\"Debug\"\r\n    \r\n    #if you built the dependencies and put them in the libs directory, then you are good to build\r\n    \r\n    #if you installed the dependencies to the system, you are prolly good to build\r\n\r\n    #if you built the dependencies yourself outside the expected ./libs subdirectories, then you will need to\r\n    # define/override the paths to the projects (which by default point to the ./libs directory)\r\n    # for example, like so:\r\n    cmake -L # list all the user-definable variables\r\n    cmake . -DGLFW3_INCLUDE_DIR=/path/to/cppformat/include -DGLFW3_LIB=glfw3 -DGLFW3_LIB_DIR=/path/to/glfw/build/src\r\n    #on some systems, you must additionally link pthreads after gtest, so let's store pthread in GTEST_LIB\r\n    cmake . \"-DGTEST_LIB=gtest;pthread\"\r\n    # .. and so on for each dependency that is not in the ./libs directory and not installed in the system\r\n\r\n    \r\n    #furthermore, if we are using freeglut via msys2, we need to specify the name of the\r\n    # glut library as `freeglut`\r\n    cmake . -DGLUT_LIB=freeglut\r\n    \r\n    #alternatively, we can set these via the GUI\r\n    cmake-gui .\r\n    \r\n    #set the various include and lib directories that are not installed in the system\r\n    #...\r\n    #press configure/generate in the cmake gui, and close the gui.\r\n    \r\n    \r\n    #to compile each target separately:\r\n    cmake --build . --target sgfxapi\r\n    cmake --build . --target sgfxapi-drawutils\r\n    cmake --build . --target sgfxdemo\r\n    \r\n    #to compile them all at once:\r\n    cmake --build .\r\n    \r\n    #copy over all the lib dlls that are not installed in the system\r\n    cp /path/to/glfw3-libs/glfw3.dll .\r\n    # ...etc.\r\n\r\n    #execute\r\n    ./sgfxdemo\r\n\r\n    #if you want this to run outside of the msys2/mingw-w64 environment, then you must additionally copy\r\n    # over any dependant dlls that are part of the mingw environment.\r\n    \r\n    #this displays all the dependencies.\r\n    ldd sgfxdemo\r\n\r\n    #copy over any of the results that are part of the environment\r\n    cp /mingw64/bin/libstdc++-6.dll .\r\n    cp /mingw64/bin/libgcc_s_seh-1.dll .\r\n    cp /mingw64/bin/libwinpthread-1.dll .\r\n    cp /mingw64/bin/glew32.dll .\r\n    #and so on\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}